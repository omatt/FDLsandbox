// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.omatt.fdlsandbox.components;

import com.omatt.fdlsandbox.AppController;
import com.omatt.fdlsandbox.modules.deeplink.DeepLinkActivity;
import com.omatt.fdlsandbox.modules.deeplink.DeepLinkActivity_MembersInjector;
import com.omatt.fdlsandbox.modules.deeplink.DeepLinkPresenter;
import com.omatt.fdlsandbox.modules.inappbrowser.InAppBrowserActivity;
import com.omatt.fdlsandbox.modules.inappbrowser.InAppBrowserActivity_MembersInjector;
import com.omatt.fdlsandbox.modules.inappbrowser.InAppBrowserPresenter;
import com.omatt.fdlsandbox.modules.main.MainActivity;
import com.omatt.fdlsandbox.modules.main.MainActivity_MembersInjector;
import com.omatt.fdlsandbox.modules.main.MainPresenter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<MainPresenter> provideMainPresenterProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private Provider<DeepLinkPresenter> provideMainPresenterProvider2;

  private MembersInjector<DeepLinkActivity> deepLinkActivityMembersInjector;

  private Provider<InAppBrowserPresenter> provideInAppBrowserPresenterProvider;

  private MembersInjector<InAppBrowserActivity> inAppBrowserActivityMembersInjector;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideMainPresenterProvider =
        DoubleCheck.provider(MainModule_ProvideMainPresenterFactory.create(builder.mainModule));

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(provideMainPresenterProvider);

    this.provideMainPresenterProvider2 =
        DoubleCheck.provider(
            DeepLinkModule_ProvideMainPresenterFactory.create(builder.deepLinkModule));

    this.deepLinkActivityMembersInjector =
        DeepLinkActivity_MembersInjector.create(provideMainPresenterProvider2);

    this.provideInAppBrowserPresenterProvider =
        DoubleCheck.provider(
            InAppBrowserModule_ProvideInAppBrowserPresenterFactory.create(
                builder.inAppBrowserModule));

    this.inAppBrowserActivityMembersInjector =
        InAppBrowserActivity_MembersInjector.create(provideInAppBrowserPresenterProvider);
  }

  @Override
  public void inject(AppController app) {
    MembersInjectors.<AppController>noOp().injectMembers(app);
  }

  @Override
  public void inject(MainActivity mainActivity) {
    mainActivityMembersInjector.injectMembers(mainActivity);
  }

  @Override
  public void inject(DeepLinkActivity deepLinkActivity) {
    deepLinkActivityMembersInjector.injectMembers(deepLinkActivity);
  }

  @Override
  public void inject(InAppBrowserActivity inAppBrowserActivity) {
    inAppBrowserActivityMembersInjector.injectMembers(inAppBrowserActivity);
  }

  public static final class Builder {
    private MainModule mainModule;

    private DeepLinkModule deepLinkModule;

    private InAppBrowserModule inAppBrowserModule;

    private Builder() {}

    public AppComponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (deepLinkModule == null) {
        this.deepLinkModule = new DeepLinkModule();
      }
      if (inAppBrowserModule == null) {
        this.inAppBrowserModule = new InAppBrowserModule();
      }
      return new DaggerAppComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }

    public Builder deepLinkModule(DeepLinkModule deepLinkModule) {
      this.deepLinkModule = Preconditions.checkNotNull(deepLinkModule);
      return this;
    }

    public Builder inAppBrowserModule(InAppBrowserModule inAppBrowserModule) {
      this.inAppBrowserModule = Preconditions.checkNotNull(inAppBrowserModule);
      return this;
    }
  }
}
